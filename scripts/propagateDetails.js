/**
 * Get details (name, version, etc) from package.json and write to
 * project files.
 * Assumes that script is being run at the project top level.
 */
var fs = require("fs");

// Details from package.json
var packagejson = require("../package.json");
var version = packagejson.version;
var name = packagejson.name;
var lib = packagejson.directories.lib;

// Details from webpack.config
var webpackconfig = require("../webpack.config.js");
var latestWebPath = webpackconfig[0].output.path;
var latestWebFileName = webpackconfig[0].output.filename;
var webLibraryName = webpackconfig[0].output.library;
var latestNodePath = webpackconfig[1].output.path;
var latestNodeFileName = webpackconfig[1].output.filename;
var nodeLibraryName = webpackconfig[1].output.library;

// Files
var jsFile = "./spec/helpers/projectDetails.js";
var buildScript = "./scripts/mkDistDirectory.js";

// Contents
var thisFile = "CornerStone/scripts/propagateDetails.js";
var generatedComment = "// DO NOT EDIT THIS FILE: This file was generated by " + thisFile + ". \n" +
      "// Any edits to this file might be discarded. Please make any edits to " + thisFile + ".\n";

var jsVars = {
   "projectVersion": version,
   "projectName": name,
   "projectLib": lib,
   "webProjectLatestPath": latestWebPath.replace(/\\/g, "/"),
   "webProjectLatestFile": latestWebFileName,
   "webProjectLibraryName": webLibraryName,
   "nodeProjectLatestPath": latestNodePath.replace(/\\/g, "/"),
   "nodeProjectLatestFile": latestNodeFileName,
   "nodeProjectLibraryName": nodeLibraryName
}
var jsFileContents = generatedComment;
for (variable in jsVars) {
   jsFileContents += "var " + variable + " = \"" + jsVars[variable] + "\";\n";
}
jsFileContents +=
   "// define as global in node\n" +
   "if (typeof global !== 'undefined') {\n";
for (variable in jsVars) {
   jsFileContents += "   global." + variable + " = " + variable + ";\n";
}
jsFileContents += "}";

var buildScriptContents = generatedComment +
   "var version = \"" + version + "\";\n" +
function() {
var fs = require('fs');

var dist = "./dist";
var csDist = "./dist/CornerStone-" + version;

createDir(dist);
setTimeout(() => {createDir(csDist)}, 800);

function createDir(dir)
{
   fs.exists(dir, (exists) => {
      if (!exists) {
         fs.mkdir(dir, (err) => {
            if (err) {
               console.error("Could not create directory " + dir);
               throw err;
            }
            console.log("Successfully created directory " + dir);
         });
      }
   });
}
}.toString().slice(13, -2);

// Write to files.
writeToFile(jsFile, jsFileContents);
writeToFile(buildScript, buildScriptContents);

function writeToFile(file, contents)
{
   fs.writeFile(file, contents, (err) => {
      if (err) throw err;
      console.log(thisFile + " successfully wrote to " + file);
   });
}
